# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
from fastapi import FastAPI, Request, Header
import hmac
import hashlib
import uvicorn
from pyngrok import ngrok
import threading

WEBHOOK_SECRET = "your_webhook_secret"  # Set this to any random secret string
PORT = 8000

app = FastAPI()

def verify_signature(payload: bytes, signature: str):
    computed = hmac.new(WEBHOOK_SECRET.encode(), payload, hashlib.sha256).hexdigest()
    return hmac.compare_digest(computed, signature)

@app.post("/webhook")
async def coinbase_webhook(request: Request, x_webhook_signature: str = Header(None)):
    body = await request.body()

    if not verify_signature(body, x_webhook_signature or ""):
        return {"status": "unauthorized"}

    data = await request.json()
    print("Received Smart Contract Event:", data)
    return {"status": "ok"}

def start_server():
    uvicorn.run(app, host="0.0.0.0", port=PORT)

public_url = ngrok.connect(PORT)
print(f"Your public webhook URL: {public_url}")

threading.Thread(target=start_server, daemon=True).start()